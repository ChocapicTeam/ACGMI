package com.gestion;

import java.awt.TrayIcon.MessageType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Logger;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

import com.sqlite.GestionBD;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nabil
 */
public class FenetreStatistique extends JFrame {

	/**
	 * Creates new form FenetreStatistique
	 */
	public FenetreStatistique() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel6 = new JPanel();
		panelOption = new JPanel();
		panelSpecialite = new JPanel();
		cbDL = new JCheckBox();
		cbIHM = new JCheckBox();
		cbCAMSI = new JCheckBox();
		cbIARF = new JCheckBox();
		cbIM = new JCheckBox();
		panelUEs = new JPanel();
		cbProjet = new JCheckBox();
		cbDCLL = new JCheckBox();
		cbMCPOOA = new JCheckBox();
		cbTer = new JCheckBox();
		cbIAA = new JCheckBox();
		cbMPI = new JCheckBox();
		cbStage = new JCheckBox();
		cbIAN = new JCheckBox();
		cbNSTR = new JCheckBox();
		cb3DIS = new JCheckBox();
		cbIATI = new JCheckBox();
		cbRC = new JCheckBox();
		cbAHP = new JCheckBox();
		cbIAWS = new JCheckBox();
		cbRO = new JCheckBox();
		cbAIRC2 = new JCheckBox();
		cbIG3D = new JCheckBox();
		cbBDOO = new JCheckBox();
		cbAL = new JCheckBox();
		cbIHMUL = new JCheckBox();
		cbBDPR = new JCheckBox();
		cbAS = new JCheckBox();
		cbIVO = new JCheckBox();
		cbIR = new JCheckBox();
		cbASDSI = new JCheckBox();
		cbJEE = new JCheckBox();
		cbSPR = new JCheckBox();
		cbCSR = new JCheckBox();
		cbMA = new JCheckBox();
		panelBouton = new JPanel();
		boutonValider = new JButton();
		panelTable = new JPanel();
		jScrollPane1 = new JScrollPane();
		jTable1 = new JTable();

		listeCbUe.add(cb3DIS);
		listeCbUe.add(cbAHP);
		listeCbUe.add(cbAIRC2);
		listeCbUe.add(cbAL);
		listeCbUe.add(cbAS);
		listeCbUe.add(cbASDSI);
		listeCbUe.add(cbBDOO);
		listeCbUe.add(cbBDPR);
		listeCbUe.add(cbCSR);
		listeCbUe.add(cbDCLL);
		listeCbUe.add(cbIAA);
		listeCbUe.add(cbIAN);
		listeCbUe.add(cbIATI);
		listeCbUe.add(cbIAWS);
		listeCbUe.add(cbIG3D);
		listeCbUe.add(cbIHMUL);
		listeCbUe.add(cbIR);
		listeCbUe.add(cbIVO);
		listeCbUe.add(cbJEE);
		listeCbUe.add(cbMA);
		listeCbUe.add(cbMCPOOA);
		listeCbUe.add(cbMPI);
		listeCbUe.add(cbNSTR);
		listeCbUe.add(cbProjet);
		listeCbUe.add(cbRC);
		listeCbUe.add(cbRO);
		listeCbUe.add(cbSPR);
		listeCbUe.add(cbStage);
		listeCbUe.add(cbTer);

		GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(
				GroupLayout.Alignment.LEADING).addGap(0, 100, Short.MAX_VALUE));
		jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(
				GroupLayout.Alignment.LEADING).addGap(0, 100, Short.MAX_VALUE));

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		getContentPane().setLayout(new java.awt.GridLayout(1, 2));

		panelSpecialite.setBorder(BorderFactory
				.createTitledBorder("Spécialités"));

		cbDL.setText("DL");
		listeCbSpe.add(cbDL);
		cbDL.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbDLActionPerformed(evt);
			}
		});
		panelSpecialite.add(cbDL);

		cbIHM.setText("IHM");
		listeCbSpe.add(cbIHM);
		panelSpecialite.add(cbIHM);

		cbCAMSI.setText("CAMSI");
		listeCbSpe.add(cbCAMSI);
		panelSpecialite.add(cbCAMSI);

		cbIARF.setText("IARF");
		listeCbSpe.add(cbIARF);

		cbIARF.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbIARFActionPerformed(evt);
			}
		});
		panelSpecialite.add(cbIARF);

		cbIM.setText("IM");
		listeCbSpe.add(cbIM);

		panelSpecialite.add(cbIM);

		panelUEs.setBorder(BorderFactory.createTitledBorder("Liste UEs"));
		panelUEs.setLayout(new java.awt.GridLayout(10, 3));

		cbProjet.setText("PROJET");
		cbProjet.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbProjetActionPerformed(evt);
			}
		});
		panelUEs.add(cbProjet);

		cbDCLL.setText("DCLL");
		panelUEs.add(cbDCLL);

		cbMCPOOA.setText("MCPOOA");
		cbMCPOOA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbMCPOOAActionPerformed(evt);
			}
		});
		panelUEs.add(cbMCPOOA);

		cbTer.setText("TER");
		panelUEs.add(cbTer);

		cbIAA.setText("IAA");
		panelUEs.add(cbIAA);

		cbMPI.setText("MPI");
		panelUEs.add(cbMPI);

		cbStage.setText("STAGE");
		panelUEs.add(cbStage);

		cbIAN.setText("IAN");
		panelUEs.add(cbIAN);

		cbNSTR.setText("NSTR");
		panelUEs.add(cbNSTR);

		cb3DIS.setText("3DIS");
		panelUEs.add(cb3DIS);

		cbIATI.setText("IATI");
		panelUEs.add(cbIATI);

		cbRC.setText("RC");
		panelUEs.add(cbRC);

		cbAHP.setText("AHP");
		cbAHP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbAHPActionPerformed(evt);
			}
		});
		panelUEs.add(cbAHP);

		cbIAWS.setText("IAWS");
		panelUEs.add(cbIAWS);

		cbRO.setText("RO");
		panelUEs.add(cbRO);

		cbAIRC2.setText("AIRC2");
		panelUEs.add(cbAIRC2);

		cbIG3D.setText("IG3D");
		panelUEs.add(cbIG3D);

		cbBDOO.setText("BDOO");
		panelUEs.add(cbBDOO);

		cbAL.setText("AL");
		panelUEs.add(cbAL);

		cbIHMUL.setText("IHMUL");
		panelUEs.add(cbIHMUL);

		cbBDPR.setText("BDPR");
		cbBDPR.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cbBDPRActionPerformed(evt);
			}
		});
		panelUEs.add(cbBDPR);

		cbAS.setText("AS");
		panelUEs.add(cbAS);

		cbIVO.setText("IVO");
		panelUEs.add(cbIVO);

		cbIR.setText("IR");
		panelUEs.add(cbIR);

		cbASDSI.setText("ASDSI");
		panelUEs.add(cbASDSI);

		cbJEE.setText("JEE");
		panelUEs.add(cbJEE);

		cbSPR.setText("SPR");
		panelUEs.add(cbSPR);

		cbCSR.setText("CSR");
		panelUEs.add(cbCSR);

		cbMA.setText("MA");
		panelUEs.add(cbMA);

		boutonValider.setText("Valider");
		boutonValider.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent e) {
				listeSpe.clear();
				listeUE.clear();

				for (JCheckBox jCheckBox : listeCbSpe) {
					if (jCheckBox.isSelected()) {
						listeSpe.add(jCheckBox.getText().toString());
					}
				}

				for (JCheckBox jCheckBox : listeCbUe) {
					if (jCheckBox.isSelected())
						listeUE.add(jCheckBox.getText().toString());
				}

				if ((listeSpe.isEmpty())) {
					JOptionPane.showMessageDialog(null,
							"Veuillez selectionner une Spécialité",
							"Spécialité", JOptionPane.ERROR_MESSAGE);
				} else {
					try {
						ArrayList<Etudiant> listeEtu = new ArrayList<Etudiant>();
						listeEtu = GestionBD.getEtudiantsFiltres(listeSpe);

						if (!listeUE.isEmpty()) {
							listeEtu = GestionBD.getEtudiantsFiltresUE(
									listeEtu, listeUE);
						}
						System.out.println("nb etu filtres: " + listeEtu.size());

						// permet de reset le tableau
						tableModel.setRowCount(0);

						for (int i = 0; i < listeEtu.size(); i++) {
							Object data[] = {
									listeEtu.get(i).getNumero(),
									listeEtu.get(i).getNom(),
									listeEtu.get(i).getPrenom(),
									listeEtu.get(i).getSpecialite(),
									listeEtu.get(i).isRedoublant() ? "OUI"
											: "NON",
									listeEtu.get(i).getListeUE().get(0)
											.getNom(),
									listeEtu.get(i).getListeUE().get(1)
											.getNom(),
									listeEtu.get(i).getListeUE().get(2)
											.getNom(),
									listeEtu.get(i).getListeUE().get(3)
											.getNom(),
									listeEtu.get(i).getListeUE().get(4)
											.getNom(),
									listeEtu.get(i).getListeUE().get(5)
											.getNom(),
									listeEtu.get(i).getListeUE().get(6)
											.getNom(),
									listeEtu.get(i).getListeUE().get(7)
											.getNom(),
									listeEtu.get(i).getListeUE().get(8)
											.getNom(),
									listeEtu.get(i).getListeUE().get(9)
											.getNom(), };
							tableModel.addRow(data);
						}

						jTable1.setModel(tableModel);

					} catch (ClassNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}
			}
		});
		panelBouton.add(boutonValider);

		GroupLayout panelOptionLayout = new GroupLayout(panelOption);
		panelOption.setLayout(panelOptionLayout);
		panelOptionLayout
				.setHorizontalGroup(panelOptionLayout
						.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(
								panelOptionLayout
										.createSequentialGroup()
										.addGroup(
												panelOptionLayout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addComponent(
																panelUEs,
																GroupLayout.Alignment.TRAILING,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																panelSpecialite,
																GroupLayout.Alignment.TRAILING,
																GroupLayout.DEFAULT_SIZE,
																597,
																Short.MAX_VALUE)
														.addGroup(
																panelOptionLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				panelBouton,
																				GroupLayout.DEFAULT_SIZE,
																				GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		panelOptionLayout.setVerticalGroup(panelOptionLayout
				.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
						panelOptionLayout
								.createSequentialGroup()
								.addGap(15, 15, 15)
								.addComponent(panelSpecialite,
										GroupLayout.PREFERRED_SIZE, 79,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(panelUEs,
										GroupLayout.PREFERRED_SIZE, 266,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(panelBouton,
										GroupLayout.PREFERRED_SIZE, 80,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(26, Short.MAX_VALUE)));

		getContentPane().add(panelOption);

		panelTable.setBorder(BorderFactory
				.createTitledBorder("Listes des étudiants"));
		panelTable.setLayout(new java.awt.GridLayout(1, 0));

		// jTable1.setModel(new DefaultTableModel(new Object[][] {
		// { null, null, null, null }, { null, null, null, null },
		// { null, null, null, null }, { null, null, null, null } },
		// new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
		jScrollPane1.setViewportView(jTable1);

		panelTable.add(jScrollPane1);
		jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		getContentPane().add(panelTable);

		pack();
	}// </editor-fold>

	private void cbBDPRActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void cbAHPActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void cbMCPOOAActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void cbProjetActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void cbIARFActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void cbDLActionPerformed(ActionEvent evt) {

		// TODO add your handling code here:
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (UIManager.LookAndFeelInfo info : UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(FenetreStatistique.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(FenetreStatistique.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(FenetreStatistique.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(FenetreStatistique.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new FenetreStatistique().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private ArrayList<String> listeSpe = new ArrayList<String>();
	private ArrayList<String> listeUE = new ArrayList<String>();

	private ArrayList<JCheckBox> listeCbSpe = new ArrayList<JCheckBox>();
	private ArrayList<JCheckBox> listeCbUe = new ArrayList<JCheckBox>();

	private JButton boutonValider;
	private JCheckBox cb3DIS, cbAHP, cbAIRC2, cbAL, cbAS, cbASDSI, cbBDOO,
			cbBDPR, cbCSR, cbDCLL, cbIAA, cbIAN, cbIATI, cbIAWS, cbIG3D,
			cbIHMUL, cbIR, cbIVO, cbJEE, cbMA, cbMCPOOA, cbMPI, cbNSTR,
			cbProjet, cbRC, cbRO, cbSPR, cbStage, cbTer;

	private JCheckBox cbCAMSI, cbDL, cbIARF, cbIHM, cbIM;

	private JPanel jPanel6;
	private JScrollPane jScrollPane1;
	private JTable jTable1;
	private JPanel panelBouton;
	private JPanel panelOption;
	private JPanel panelSpecialite;
	private JPanel panelTable;
	private JPanel panelUEs;

	static Object[] objs = { "Num Etudiant", "Nom", "Prenom", "Specialite",
			"Redoublant", "UE Projet", "UE ter", "UE Imposée 1",
			"UE Imposée 2", "UE Imposée 3", "UE Imposée 4", "UE à choix 1",
			"UE à choix 2", "UE à choix 3", "UE à choix 4" };
	static DefaultTableModel tableModel = new DefaultTableModel(objs, 0);
	// End of variables declaration
}
